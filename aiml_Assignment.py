# -*- coding: utf-8 -*-
"""Copy of practice data_preprocessing_tools.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NARhgrlpce15iw0Rfgjxz7BEeHfDfy6y

# Data Preprocessing Tools

## Importing the libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt



"""## Importing the dataset"""

df=pd.read_csv("/content/Data.csv")
df

x=df.iloc[: , :3].values
y=df.iloc[: , -1:].values
print(x)
print(y)

"""
## Taking care of missing data"""

from sklearn.impute import SimpleImputer
#obj_name = clas_name
imputer = SimpleImputer(missing_values=np.nan , strategy="mean")
imputer.fit(x[:,1:3])
x[:,1:3]=imputer.transform(x[:,1:3])

x

"""## Encoding categorical data"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(transformers= [('encoder',OneHotEncoder(),[0])] , remainder ="passthrough")
x=np.array(ct.fit_transform(x))

x

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
import pandas as pd
import numpy as np

df = pd.read_csv("/content/Data.csv")
f=df.dropna()
f
ct = ColumnTransformer(transformers=[('ebcoder' , OneHotEncoder() ,[0])] , remainder="passthrough" )
k=np.array(ct.fit_transform(f))
print(k)

"""### Encoding the Independent Variable"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
import pandas as pd
import numpy as np

df = pd.read_csv("/content/Data.csv")
f=df.dropna()
f
ct = ColumnTransformer(transformers=[('ebcoder' , OneHotEncoder() ,[0])] , remainder="passthrough" )
k=np.array(ct.fit_transform(f))
print(k)

y

"""### Encoding the Dependent Variable"""

#only use this encoder only for y/n type of column
from sklearn.preprocessing import LabelEncoder

kit = LabelEncoder()
y=kit.fit_transform(y)
print(y)

"""## Splitting the dataset into the Training set and Test set"""

df

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

print(x_train)

print(x_test )

